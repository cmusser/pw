#!/usr/bin/env python

import getpass
import nacl.exceptions
import os
from pw.core import Cli, Store
from subprocess import Popen, PIPE


def handle_display_cmd(search_term):
    ''' pre_func that handles toggling password display mode '''
    if search_term == 'display':
        args.display = not args.display
        print 'password display now {}'.format('on' if args.display else 'off')
        return False

    return True


def display_results(cli, names):
    ''' display_func that displays credential data, one field per line '''
    n = 0
    for name in names:
        n += 1
        credential_data = cli.data[name]
        print "\n{}.) {}".format(n, name)

        for field in cli.fields:
            if field in credential_data:
                value = credential_data[field]
                print "{0:{1}} : {2}".format(field, cli.max_field_len,
                                             '*' * len(value)
                                             if (field == 'password'
                                                 and not args.display)
                                             else value)


def copy_pw_to_clipboard(cli, search_term, name):
    ''' action_func that copies credential password to clipboard '''

    if not name:
        print 'not found'
        return

    if os.uname()[0] == 'Darwin':
        clip_cmd = 'pbcopy'
    else:
        clip_cmd = ['xsel', '-b']

    try:
        clip_process = Popen(clip_cmd, stdin=PIPE)
        clip_process.communicate(cli.data[name]['password'])
        print "password copied to clipboard."
    except OSError as e:
        print '{} If UNIX, install "xsel".'.format(e)

#
# Main program
#
parser = Cli.create_arg_parser('Look up credentials, store password in the '
                               'system clipboard.')
parser.add_argument('--display', '-d', action='store_true',
                    help='display password (default: obscure)')
parser.add_argument('--list', '-l', action='store_true',
                    help='List credential names, then exit.')
args = parser.parse_args()

if args.list:
    try:
        pw_store = Store(args.pw_file, getpass.getpass())
        pw_store.load()
        for name in pw_store.data:
            print name
        print '\n{} credentials'.format(len(pw_store.data))
    except (IOError, nacl.exceptions.CryptoError) as e:
        print e
else:
    cli = Cli(args.pw_file)
    cli.run('pw', handle_display_cmd, display_results,
            copy_pw_to_clipboard, args.credential_name)
