#!/usr/bin/env python

import argparse
import getpass
import nacl.exceptions
import os
from pw.core import Cli
from subprocess import Popen, PIPE


def lookup_credential(cli, search_term):
    cli.load()
    if search_term == 'display':
        args.display = not args.display
        print 'password display now {}'.format('on' if args.display else 'off')
        return

    n = 0
    names = cli.find(search_term)
    for name in names:
        n += 1
        credential_data = cli.pw_data[name]
        print "\n{}.) {}".format(n, name)

        for field in cli.fields:
            if field in credential_data:
                value = credential_data[field]
                print "{0:{1}} : {2}".format(field, cli.max_field_len,
                                             '*' * len(value)
                                             if (field == 'password'
                                                 and not args.display)
                                             else value)

    match_count = len(names)
    if match_count == 0:
        print 'no matches'
    else:
        if match_count == 1:
            name = names[0]
        else:
            name = names[cli.prompt_for_idx(names)]

        if os.uname()[0] == 'Darwin':
            clip_cmd = 'pbcopy'
        else:
            clip_cmd = ['xsel', '-b']

        try:
            clip_process = Popen(clip_cmd, stdin=PIPE)
            clip_process.communicate(cli.pw_data[name]['password'])
            print "password copied to clipboard."
        except OSError as e:
            print '{} If UNIX, install "xsel".'.format(e)


parser = argparse.ArgumentParser(
    description='Look up password, store it in the system clipboard.')
parser.add_argument('--display', '-d', action='store_true',
                    help='display password (default: obscure)')
parser.add_argument('--list', '-l', action='store_true',
                    help='List credential names, then exit.')
parser.add_argument('pw_file', help='password list')
parser.add_argument('credential_name', nargs='?', default=None,
                    help='name of credential (if not specified, command '
                    'will prompt.')
args = parser.parse_args()

try:
    cli = Cli(args.pw_file, getpass.getpass())
    if args.list:
        pw_data = cli.load()
        for name in pw_data:
            print name
        print '\n{} credentials'.format(len(pw_data))
    else:
        if args.credential_name is None:
            cli.prompt_loop('pw', lookup_credential)
        else:
            lookup_credential(cli, args.credential_name)

except (IOError, nacl.exceptions.CryptoError) as e:
    print e

except (KeyboardInterrupt, EOFError):
    print
