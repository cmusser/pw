#!/usr/bin/env python

import os
from pw.core import Cli, CliHelper
from subprocess import Popen, PIPE


class PwHelper(CliHelper):

    def preprocess_input(self, cli_input):
        ''' pre_func that handles toggling password display mode '''
        if cli_input == 'display':
            cli.args.display = not cli.args.display
            print 'password display now {}'.format('on' if cli.args.display
                                                   else 'off')
            return True

        return super(PwHelper, self).preprocess_input(cli_input)

    def display(self, names):
        ''' display_func that displays credential data, one field per line '''
        n = 0
        for name in names:
            n += 1
            credential_data = cli.data[name]
            prefix = '{}. '.format(n) if len(names) > 1 else ''
            print "\n{}{}".format(prefix, name)

            for field in cli.fields:
                if field in credential_data:
                    value = credential_data[field]
                    print "{0:{1}} : {2}".format(field, cli.max_field_len,
                                                 '*' * len(value)
                                                 if (field == 'password'
                                                     and not cli.args.display)
                                                 else value)

    def process_input(self, cli_input, name):
        ''' action_func that copies credential password to clipboard '''

        if not name:
            print 'not found'
            return

        if os.uname()[0] == 'Darwin':
            clip_cmd = 'pbcopy'
        else:
            clip_cmd = ['xsel', '-b']

        try:
            clip_process = Popen(clip_cmd, stdin=PIPE)
            clip_process.communicate(cli.data[name]['password'])
            print "password copied to clipboard."
        except OSError as e:
            print '{} If UNIX, install "xsel".'.format(e)

#
# Main program
#

cli = Cli('Look up credentials, store password in the system clipboard.')
cli._parser.add_argument('--display', '-d', action='store_true',
                         help='display password (default: obscure)')
cli.run('pw', PwHelper)
