#!/usr/bin/env python

import argparse
import getpass
import nacl.exceptions
import pw.data
import pw.file
import pw.util
import random
import re
import string

def edit_credential(pw_data, name):
    if name not in pw_data:
        action = 'Creating'
        cur = {}
        for field in pw.data.fields:
            cur[field] = ''
    else:
        action = 'Editing'
        cur = pw_data[name].copy()

    print '{} credential "{}"'. format(action, name)
    for field in pw.data.fields:
        suggested_pw = None
        if action == 'Creating':
            if field == 'password':
                myrg = random.SystemRandom()
                length = 10
                alphabet = string.letters[0:52] + string.digits
                suggested_pw = str().join(myrg.choice(alphabet) for _ in range(length))
                cur_text = ' [{}]'.format(suggested_pw)
            else:
                cur_text = ''
        elif field not in cur:
            cur_text = ''
        else:
            cur_text = ' [{}]'.format(cur[field])

        new_value = raw_input('{}{}: '.format(field, cur_text))
        if new_value != '':
            cur[field] = new_value
        elif action == 'Creating' and field == 'password':
            cur[field] = suggested_pw

    if (re.search('^y?$', raw_input('OK? [Y/n] '), re.I)):
        pw_data[name] = cur
        return True
    else:
        return False


def lookup_credential(pw_data, search_term):
    names =  pw.data.find(search_term, pw_data)
    match_count = len(names)
    if match_count == 0:
        credential_name = search_term
    elif match_count == 1:
        credential_name = names[0]
    else:
        n = 0
        for name in names:
            n += 1
            print "\n{}.) {}".format(n, name)
        credential_name = names[pw.util.prompt_for_idx(names)]
    
    while not edit_credential(pw_data, credential_name):
        pass


parser = argparse.ArgumentParser(
    description='Edit or create password.')

parser.add_argument('pw_file', help='password list')
parser.add_argument('credential_name', nargs='?', default=None,
                    help='name of credential (if not specified, command '
                    'will prompt.')
args = parser.parse_args()

try:
    path = pw.file.path(args.pw_file)
    password = getpass.getpass()
    pw_data = pw.file.load(path, password)

    if args.credential_name is None:
        pw.util.prompt_loop('editpw', pw_data, lookup_credential)
    else:
        lookup_credential(pw_data, args.credential_name)

    pw.file.save(path, password, pw_data)

except (IOError, nacl.exceptions.CryptoError) as e:
    print e

except (KeyboardInterrupt, EOFError):
    print
