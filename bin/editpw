#!/usr/bin/env python

import pw.cli
import random
import re
import string


class EditPwHelper(pw.cli.CliHelper):

    @property
    def pw_len(self):
        return self._pw_len

    @pw_len.setter
    def pw_len(self, new_pw_len):
        self._pw_len = int(new_pw_len)

    def __init__(self, cli):
        self._pw_len = 12
        self._sys_rand = random.SystemRandom()
        self._pw_alphabet = string.letters[0:52] + string.digits
        super(EditPwHelper, self).__init__(cli)

    def create_password(self):
        return str().join(self._sys_rand.choice(self._pw_alphabet)
                          for _ in range(self._pw_len))

    def preprocess_input(self, cli_input):
        ''' pre_func that handles toggling password display mode '''
        m = re.search('^\s*pwlen\s+(\w+)\s*$', cli_input, re.I)
        if m:
            try:
                self.pw_len = m.group(1)
                print 'password length now {}'.format(self._pw_len)
            except ValueError:
                print "invalid number for password length."

            return True

        return super(EditPwHelper, self).preprocess_input(cli_input)

    def process_input(self, cli_input, name):

        # This loop allows the user to cancel out before saving and start over.
        done = False

        while not done:

            if name is None:
                name = cli_input
                cur = {}
                print 'Creating credential "{}"'.format(name)
                for field in pw.db.FIELDS:
                    if field == 'password':
                        # Pre-fill this with randomly generated password
                        cur[field] = self.create_password()
                        default = ' [{}]'.format(cur[field])
                    else:
                        cur[field] = default = ''

                    new_value = raw_input('{}{}: '.format(field, default))
                    if new_value != '':
                        cur[field] = new_value

            else:
                print 'Editing credential "{}"'.format(name)
                cur = self.cli.data[name].copy()
                for field in pw.db.FIELDS:
                    if field not in cur:
                        cur[field] = ''  # Just in case key doesn't exist.
                    default = '' if cur[field] == '' else ' [{}]'.format(cur[field])
                    new_value = raw_input('{}{}: '.format(field, default))
                    if field == 'password' and new_value == 'new':
                        cur[field] = self.create_password()
                        print 'new password generated.'
                    elif new_value != '':
                        cur[field] = new_value

            if (re.search('^y?$', raw_input('OK? [Y/n] '), re.I)):
                self.cli.data[name] = cur
                self.cli.save()
                done = True

#
# Main program
#

pw.cli.Cli('Edit or create credentials.').run('edit', EditPwHelper,
                                              pw.db.RW_CREATE_EMPTY)
